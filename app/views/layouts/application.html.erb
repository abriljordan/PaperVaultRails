<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "PaperVault - Google Drive Clone" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Font Awesome for icons %>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_include_tag "application", "data-turbo-track": "reload", type: "module" %>
  </head>

  <body class="bg-gray-50">
    <% if user_signed_in? %>
      <!-- Navigation Header -->
      <nav class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex justify-between items-center h-16">
            <!-- Logo and Search -->
            <div class="flex items-center flex-1">
              <div class="flex-shrink-0">
                <a href="<%= dashboard_path %>" class="flex items-center">
                  <i class="fas fa-cloud text-blue-600 text-2xl mr-2"></i>
                  <span class="text-xl font-semibold text-gray-900">PaperVault</span>
                </a>
              </div>
              
              <!-- Search Bar -->
              <div class="ml-8 flex-1 max-w-lg">
                <form action="<%= search_path %>" method="get" class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <i class="fas fa-search text-gray-400"></i>
                  </div>
                  <input type="text" name="q" placeholder="Search in PaperVault" 
                         class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500">
                </form>
              </div>
            </div>

            <!-- User Menu -->
            <div class="flex items-center space-x-4">
              <!-- Storage Usage -->
              <div class="hidden md:block">
                <div class="text-sm text-gray-600">
                  <%= number_to_human_size(current_user.total_storage_used) %> of <%= number_to_human_size(current_user.storage_limit) %> used
                </div>
                <div class="w-32 bg-gray-200 rounded-full h-2">
                  <div class="bg-blue-600 h-2 rounded-full" style="width: <%= (current_user.total_storage_used.to_f / current_user.storage_limit * 100).round(1) %>%"></div>
                </div>
              </div>

              <!-- User Dropdown -->
              <div class="relative">
                <button type="button" class="flex items-center space-x-2 text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" id="user-menu-button">
                  <img class="h-8 w-8 rounded-full" src="https://ui-avatars.com/api/?name=<%= current_user.name %>&background=4285f4&color=fff" alt="">
                  <span class="hidden md:block text-gray-700"><%= current_user.name %></span>
                  <i class="fas fa-chevron-down text-gray-400"></i>
                </button>
                
                <!-- Dropdown menu -->
                <div class="hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none" id="user-menu-dropdown">
                  <div class="py-1">
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                      <i class="fas fa-user mr-2"></i>Profile
                    </a>
                    <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                      <i class="fas fa-cog mr-2"></i>Settings
                    </a>
                    <hr class="my-1">
                    <%= link_to destroy_user_session_path, method: :delete, class: "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" do %>
                      <i class="fas fa-sign-out-alt mr-2"></i>Sign out
                    <% end %>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </nav>

      <!-- Main Content -->
      <div class="flex">
        <!-- Sidebar -->
        <div class="w-64 bg-white shadow-sm border-r border-gray-200 min-h-screen">
          <div class="p-4">
            <!-- Quick Actions -->
            <div class="mb-6">
              <div class="relative">
                <button type="button" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center" id="new-button">
                  <i class="fas fa-plus mr-2"></i>New
                  <i class="fas fa-chevron-down ml-2"></i>
                </button>
                
                <!-- Dropdown menu -->
                <div class="hidden absolute top-full left-0 right-0 mt-1 bg-white rounded-md shadow-lg border border-gray-200 z-50 min-w-full" id="new-dropdown">
                  <div class="py-1">
                    <%= link_to new_folder_path, class: "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center" do %>
                      <i class="fas fa-folder-plus mr-3 text-yellow-500"></i>
                      New Folder
                    <% end %>
                    <%= link_to new_document_path, class: "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center" do %>
                      <i class="fas fa-upload mr-3 text-blue-500"></i>
                      Upload File
                    <% end %>
                  </div>
                </div>
              </div>
            </div>

            <!-- Navigation Menu -->
            <nav class="space-y-1">
              <a href="<%= dashboard_path %>" class="flex items-center px-3 py-2 text-sm font-medium text-gray-900 rounded-md hover:bg-gray-100">
                <i class="fas fa-home mr-3 text-gray-400"></i>
                My Drive
              </a>
              <a href="<%= folders_path %>" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100">
                <i class="fas fa-folder mr-3 text-gray-400"></i>
                Folders
              </a>
              <a href="<%= documents_path %>" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100">
                <i class="fas fa-file mr-3 text-gray-400"></i>
                Files
              </a>
              <a href="#" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100">
                <i class="fas fa-share-alt mr-3 text-gray-400"></i>
                Shared with me
              </a>
              <a href="#" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100">
                <i class="fas fa-star mr-3 text-gray-400"></i>
                Starred
              </a>
              <a href="#" class="flex items-center px-3 py-2 text-sm font-medium text-gray-600 rounded-md hover:bg-gray-100">
                <i class="fas fa-trash mr-3 text-gray-400"></i>
                Trash
              </a>
            </nav>

            <!-- Storage Info -->
            <div class="mt-8 p-3 bg-gray-50 rounded-lg">
              <div class="text-sm font-medium text-gray-900 mb-2">Storage</div>
              <div class="text-xs text-gray-600 mb-2">
                <%= number_to_human_size(current_user.total_storage_used) %> of <%= number_to_human_size(current_user.storage_limit) %> used
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-blue-600 h-2 rounded-full" style="width: <%= (current_user.total_storage_used.to_f / current_user.storage_limit * 100).round(1) %>%"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Main Content Area -->
        <div class="flex-1 p-6">
          <% if notice %>
            <div class="mb-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded">
              <%= notice %>
            </div>
          <% end %>
          
          <% if alert %>
            <div class="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded">
              <%= alert %>
            </div>
          <% end %>

          <%= yield %>
        </div>
      </div>
    <% else %>
      <!-- Public pages (login, register) -->
      <%= yield %>
    <% end %>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded, initializing dropdowns...');
        
        // User dropdown functionality
        const userMenuButton = document.getElementById('user-menu-button');
        const userMenuDropdown = document.getElementById('user-menu-dropdown');
        
        if (userMenuButton && userMenuDropdown) {
          userMenuButton.addEventListener('click', function(e) {
            e.stopPropagation();
            userMenuDropdown.classList.toggle('hidden');
          });
        }

        // New button dropdown functionality
        const newButton = document.getElementById('new-button');
        const newDropdown = document.getElementById('new-dropdown');
        
        if (newButton && newDropdown) {
          console.log('Setting up new button dropdown');
          
          // Toggle dropdown on button click
          newButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log('New button clicked');
            
            const isVisible = !newDropdown.classList.contains('hidden');
            if (isVisible) {
              newDropdown.classList.add('hidden');
              console.log('Hiding dropdown');
            } else {
              newDropdown.classList.remove('hidden');
              console.log('Showing dropdown');
            }
          });
          
          // Keep dropdown open when clicking inside it
          newDropdown.addEventListener('click', function(e) {
            e.stopPropagation();
          });
        }
        
        // Initialize dropdown functionality
        initializeDropdowns();
        
        // Global click handler to close dropdowns
        document.addEventListener('click', function(e) {
          // Close user dropdown
          if (userMenuDropdown && !userMenuButton.contains(e.target)) {
            userMenuDropdown.classList.add('hidden');
          }
          
          // Close new dropdown
          if (newDropdown && !newButton.contains(e.target) && !newDropdown.contains(e.target)) {
            newDropdown.classList.add('hidden');
            console.log('Closing new dropdown from outside click');
          }
          
          // Close folder dropdowns
          document.querySelectorAll('.folder-menu-dropdown').forEach(dropdown => {
            const button = document.querySelector(`.folder-menu-button[data-folder-id="${dropdown.getAttribute('data-folder-id')}"]`);
            if (button && !button.contains(e.target) && !dropdown.contains(e.target)) {
              dropdown.classList.add('hidden');
            }
          });
          
          // Close document dropdowns
          document.querySelectorAll('.document-menu-dropdown').forEach(dropdown => {
            const button = document.querySelector(`.document-menu-button[data-document-id="${dropdown.getAttribute('data-document-id')}"]`);
            if (button && !button.contains(e.target) && !dropdown.contains(e.target)) {
              dropdown.classList.add('hidden');
            }
          });
        });
        
        function initializeDropdowns() {
          console.log('Initializing dropdowns...');
          
          // Folder menu dropdowns
          const folderMenuButtons = document.querySelectorAll('.folder-menu-button');
          console.log('Found folder menu buttons:', folderMenuButtons.length);
          
          folderMenuButtons.forEach(button => {
            // Remove existing event listeners by cloning
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);
            
            newButton.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();
              console.log('Folder menu button clicked');
              
              const folderId = this.getAttribute('data-folder-id');
              const dropdown = document.querySelector(`.folder-menu-dropdown[data-folder-id="${folderId}"]`);
              
              // Close all other dropdowns
              document.querySelectorAll('.folder-menu-dropdown').forEach(d => {
                if (d !== dropdown) d.classList.add('hidden');
              });
              
              // Toggle current dropdown
              if (dropdown) {
                const isVisible = !dropdown.classList.contains('hidden');
                if (isVisible) {
                  dropdown.classList.add('hidden');
                  console.log('Hiding folder dropdown');
                } else {
                  // Move dropdown to body to ensure it's above all elements
                  if (dropdown.parentNode !== document.body) {
                    document.body.appendChild(dropdown);
                  }
                  
                  // Position the dropdown relative to the button
                  const buttonRect = this.getBoundingClientRect();
                  const dropdownRect = dropdown.getBoundingClientRect();
                  
                  // Position dropdown below and to the right of the button
                  dropdown.style.top = (buttonRect.bottom + 8) + 'px';
                  dropdown.style.left = (buttonRect.right - dropdownRect.width) + 'px';
                  dropdown.style.position = 'fixed';
                  dropdown.style.zIndex = '9999';
                  
                  dropdown.classList.remove('hidden');
                  console.log('Showing folder dropdown at position:', dropdown.style.top, dropdown.style.left);
                }
              }
            });
          });
          
          // Document menu dropdowns
          const documentMenuButtons = document.querySelectorAll('.document-menu-button');
          console.log('Found document menu buttons:', documentMenuButtons.length);
          
          documentMenuButtons.forEach(button => {
            // Remove existing event listeners by cloning
            const newButton = button.cloneNode(true);
            button.parentNode.replaceChild(newButton, button);
            
            newButton.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();
              console.log('Document menu button clicked');
              
              const documentId = this.getAttribute('data-document-id');
              const dropdown = document.querySelector(`.document-menu-dropdown[data-document-id="${documentId}"]`);
              
              // Close all other dropdowns
              document.querySelectorAll('.document-menu-dropdown').forEach(d => {
                if (d !== dropdown) d.classList.add('hidden');
              });
              
              // Toggle current dropdown
              if (dropdown) {
                const isVisible = !dropdown.classList.contains('hidden');
                if (isVisible) {
                  dropdown.classList.add('hidden');
                  console.log('Hiding document dropdown');
                } else {
                  // Move dropdown to body to ensure it's above all elements
                  if (dropdown.parentNode !== document.body) {
                    document.body.appendChild(dropdown);
                  }
                  
                  // Position the dropdown relative to the button
                  const buttonRect = this.getBoundingClientRect();
                  const dropdownRect = dropdown.getBoundingClientRect();
                  
                  // Position dropdown below and to the right of the button
                  dropdown.style.top = (buttonRect.bottom + 8) + 'px';
                  dropdown.style.left = (buttonRect.right - dropdownRect.width) + 'px';
                  dropdown.style.position = 'fixed';
                  dropdown.style.zIndex = '9999';
                  
                  dropdown.classList.remove('hidden');
                  console.log('Showing document dropdown at position:', dropdown.style.top, dropdown.style.left);
                }
              }
            });
          });
        }
        
        // Re-initialize dropdowns when Turbo navigates (for dynamic content)
        document.addEventListener('turbo:load', function() {
          console.log('Turbo load event, re-initializing dropdowns...');
          initializeDropdowns();
        });
        
        // Also re-initialize on turbo:render for dynamic updates
        document.addEventListener('turbo:render', function() {
          console.log('Turbo render event, re-initializing dropdowns...');
          setTimeout(initializeDropdowns, 100); // Small delay to ensure DOM is ready
        });
      });
    </script>
  </body>
</html>
